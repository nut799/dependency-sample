// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from proj.djinni

package com.ezored.sample;

import java.util.concurrent.atomic.AtomicBoolean;

/** Native Greeting Message Bridge class */
public abstract class GreetingMessageBridge {
    public abstract void setMessage(String message);

    public abstract String getMessage();

    public abstract void printMessage();

    public abstract void showGreetingMessageAlert(String title, String message);

    public abstract void setPlatformService(GreetingMessagePlatformService ps);

    public static native GreetingMessageBridge sharedInstance();

    private static final class CppProxy extends GreetingMessageBridge
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setMessage(String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMessage(this.nativeRef, message);
        }
        private native void native_setMessage(long _nativeRef, String message);

        @Override
        public String getMessage()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMessage(this.nativeRef);
        }
        private native String native_getMessage(long _nativeRef);

        @Override
        public void printMessage()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_printMessage(this.nativeRef);
        }
        private native void native_printMessage(long _nativeRef);

        @Override
        public void showGreetingMessageAlert(String title, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_showGreetingMessageAlert(this.nativeRef, title, message);
        }
        private native void native_showGreetingMessageAlert(long _nativeRef, String title, String message);

        @Override
        public void setPlatformService(GreetingMessagePlatformService ps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPlatformService(this.nativeRef, ps);
        }
        private native void native_setPlatformService(long _nativeRef, GreetingMessagePlatformService ps);
    }
}
